__global__ void PDH_kernel2(bucket* d_histogram, 
							double* d_atom_x_list, double* d_atom_y_list, double * d_atom_z_list, 
							long long acnt, double res, int M)
{
	//our location in the global atom list
	int id = blockIdx.x*blockDim.x + threadIdx.x;

	//load our single data point
	double x1 = d_atom_x_list[id];
	double y1 = d_atom_y_list[id];
	double z1 = d_atom_z_list[id];
	double x2,y2,z2;
	int i, j, h_pos;
	double dist;

	
	//once we're sure this much is correct, we'll work out making it dynamically sizeable
	//BLOCK_COUNT = 256
	//to access the x(0) component, the y(1) component, and the z(2) component, do tid + blockdim*axes
	extern __shared__ double Rblock[];
	 
	 //small debug logic
	//interblock for loop, for the M value, use the grid's dimensions
	for(i = blockIdx.x+1; i < M; i++)
	{

		Rblock[threadIdx.x] = 	                d_atom_x_list[blockDim.x*i + threadIdx.x];
		Rblock[threadIdx.x + BLOCK_SIZE] = 	    d_atom_y_list[blockDim.x*i + threadIdx.x];
		Rblock[threadIdx.x + BLOCK_SIZE*2] = 	d_atom_z_list[blockDim.x*i + threadIdx.x];

		__syncthreads();
		for(j = 0; j < blockDim.x; j++)
		{
			//this func
			x2 = Rblock[j];
			y2 = Rblock[j + BLOCK_SIZE];
			z2 = Rblock[j + BLOCK_SIZE*2];
			dist = sqrt((x1 - x2)*(x1-x2) + (y1 - y2)*(y1 - y2) + (z1 - z2)*(z1 - z2));
			h_pos = (int)(dist/res);
			// if(threadIdx.x == 0)
			// 	printf("hpos: %d",h_pos);
			atomicAdd((unsigned long long int*)&d_histogram[h_pos].d_cnt,1);
			
		}
		__syncthreads();
	}

	//intrablock for loop
	Rblock[threadIdx.x] = 	d_atom_x_list[id];
	Rblock[threadIdx.x + BLOCK_SIZE] = 	d_atom_y_list[id];
	Rblock[threadIdx.x + BLOCK_SIZE*2] = 	d_atom_z_list[id];

	__syncthreads();
	for(i = threadIdx.x +1; i < blockDim.x; i++)
	{
		//this func
		x2 = Rblock[j];
		y2 = Rblock[j +BLOCK_SIZE];
		z2 = Rblock[j +BLOCK_SIZE*2];
		dist = sqrt((x1 - x2)*(x1-x2) + (y1 - y2)*(y1 - y2) + (z1 - z2)*(z1 - z2));
		//atomic add
		h_pos = (int)(dist/res);
		atomicAdd((unsigned long long int*)&d_histogram[h_pos].d_cnt,1);
	}


	//write output back to histogram... not yet! we havent gotten to the privatized histogram yet!
	//__syncthreads();
}



//M = Grid Size = total number of blocks
	//B = Block Size
	int t = threadIdx.x;
	int b = blockIdx.x;
	int reg = t * B*b;
	int i, j, h_pos;
	double x1, y1, z1;
	double x2, y2, z2;
	double d;
	extern __shared__ double R[];	//the size of this should be 3*BLOCK_SIZE*sizeof(double), to house the three arrays in shared memory
							//where t is a specific index into the 'atom' array
							//the x array should be accessed by R[t]				//or is it R[t*3 + 0]?
							//the y array should be accessed by R[t + BLOCK_SIZE]	//or is it R[t*3 + 1]?
							//the z array should be accessed by R[t + BLOCK_SIZE*2] //or is it R[t*3 + 2]?

	//make sure we are a valid atom in the array
	if(reg < acnt) 
	{

		x1 = d_atom_x_list[reg];
		y1 = d_atom_y_list[reg];
		z1 = d_atom_z_list[reg];

		for(i = b+1; i < M; i++)
		{
			// R[t + BLOCK_SIZE*0] = d_atom_x_list[t + i*B];
			// R[t + BLOCK_SIZE*1] = d_atom_y_list[t + i*B];
			// R[t + BLOCK_SIZE*2] = d_atom_z_list[t + i*B];
				
			R[3*t + 0] = d_atom_x_list[t + i*B];
			R[3*t + 1] = d_atom_y_list[t + i*B];
			R[3*t + 2] = d_atom_z_list[t + i*B];

			__syncthreads();

			for(j = 0; j < B; j++)
			{
				
				// x2 = R[j + BLOCK_SIZE*0];
				// y2 = R[j + BLOCK_SIZE*1];
				// z2 = R[j + BLOCK_SIZE*2];

				x2 = R[3*j + 0];
				y2 = R[3*j + 1];
				z2 = R[3*j + 2];
				d = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2));
				h_pos = (int) (d/res);
				// atomicAdd(&d_histogram[h_pos].d_cnt, 1);
				atomicAdd(&d_histogram[h_pos], 1);
			
			}
			__syncthreads();
			
		}

		// R[t + BLOCK_SIZE*0] = d_atom_x_list[reg];
		// R[t + BLOCK_SIZE*1] = d_atom_y_list[reg];
		// R[t + BLOCK_SIZE*2] = d_atom_z_list[reg];
		R[3*t + 0] = d_atom_x_list[reg];
		R[3*t + 1] = d_atom_y_list[reg];
		R[3*t + 2] = d_atom_z_list[reg];
		__syncthreads();

		for(i = t+1; i < B; i++)
		{
			// x2 = R[i + BLOCK_SIZE*0];
			// y2 = R[i + BLOCK_SIZE*1];
			// z2 = R[i + BLOCK_SIZE*2];

			x2 = R[3*i + 0];
			y2 = R[3*i + 1];	
			z2 = R[3*i + 2];	

			d = sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2));
			h_pos = (int) (d/res);
			atomicAdd(&d_histogram[h_pos], 1);
		}
		__syncthreads();
	}